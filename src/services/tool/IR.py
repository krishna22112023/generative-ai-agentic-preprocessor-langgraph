"""Tool for Image restoration tasks using Restormer"""

from langchain_core.tools import tool

import os
import json
import sys
import subprocess
import pyprojroot
root = pyprojroot.find_root(pyprojroot.has_dir("config"))
sys.path.append(str(root))
from typing import List,Optional, Dict

from config import settings,logger

@tool()
def create_pipeline() -> str:
    """
    This function generates a plan for the image preprocessing and restoration pipeline based on the IQA results
    to be called based on the severity of the degredations detected in the image quality assessment (IQA) results.
    This function will return a dictionary where the keys are the image name and the values are lists of tools required to be run.
    """
    logger.info("Generating pipeline for image restoration tasks.")

    mapping = {
    "noise": "Real_Denoising",
    "motion blur": "Single_Image_Defocus_Deblurring",
    "defocus blur": "Motion_Deblurring",
    "rain": "Deraining",
    }

    # Load the IQA results from the intermediates folder
    iqa_results_path = os.path.join(settings.BASE, settings.LOCAL_DIR, "intermediates", "iqa_results.json")

    with open(iqa_results_path, 'r') as f:
        iqa_results = json.load(f)

    # Determine which restoration tools to run based on the IQA results
    pipeline = {}
    for image, degradations in iqa_results.items():
        filtered = [
            mapping.get(degradation.get("degradation"), None)  # Use the "type" key to map to the tool
            for degradation in degradations
            if degradation.get("severity") in ("medium", "high", "very high")
        ]
        pipeline[image] = [tool for tool in filtered if tool is not None]  # Filter out None values
    
    # Save the pipeline to a JSON file
    intermediate_path = os.path.join(settings.BASE, settings.LOCAL_DIR, "intermediates", "pipeline.json")
    with open(intermediate_path, 'w', encoding='utf-8') as outfile:
        json.dump(pipeline, outfile, indent=4)

    return json.dumps(pipeline)



@tool()
def run_pipeline(pipeline: Optional[Dict[str, List[str]]] = None) -> bool:
    """
    This function runs the pipeline generated by the create_pipeline function.
    It will run the tools specified in the pipeline for each image.
    """
    logger.info("Running pipeline for image restoration tasks.")

    pipeline = os.path.join(settings.BASE, settings.LOCAL_DIR, "intermediates", "pipeline.json")
    input_dir = os.path.join(settings.BASE)
    output_dir = os.path.join(settings.BASE, settings.LOCAL_DIR, "output")
    script_path = "src/utils/restormer.py"
    cmd = f"conda run -n restormer python {os.path.join(settings.BASE, script_path)} --pipeline {pipeline} --input_dir {input_dir} --output_dir {output_dir}"
    subprocess.run(cmd, shell=True, check=True, executable='/bin/bash')

    return True
    
ir_tools = [create_pipeline, run_pipeline]